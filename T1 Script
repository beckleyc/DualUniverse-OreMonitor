local smallVolume = 10400
local mediumVolume = 83200
local largeVolume = 166400

function round(number,decimals)
    local power = 10^decimals
    return math.floor((number/1000) * power) / power
end 

function oreStatus(percent)
    if percent <= 25 then return "<th style=\"color: red;\">LOW</th>"
    elseif percent > 25 and percent < 50 then return "<th style=\"color: orange;\">LOW</th>"
    else return "<th style=\"color: green;\">GOOD</th>"
    end 
end

function getContainerVolume(size)
    if size == "S" or size == "s" then return smallVolume
    	elseif size == "M" or size == "m" then return mediumVolume
    	elseif size == "L" or size == "l" then return largeVolume
    	else return mediumVolume
    end
end

local useL = 1 --export: Use 1 for L or 0 for t
if useL == 1 then
    unitMeasure = "KL"
elseif useL == 0 then
    unitMeasure = "T"
end



-- Bauxite Variables 
local bauxiteContainerSize = "L" --export: Size of the container (S, M, L)
local maxBauxite = getContainerVolume(bauxiteContainerSize)
local weightBauxite = 1.28 --export:
if useL == 1 then
    massBauxite = round(math.ceil(bauxite.getItemsMass()/weightBauxite),1)
elseif useL == 0 then  
    massBauxite = round(math.ceil(bauxite.getItemsMass()),1)
end
local percentBauxite = math.ceil(((math.ceil((bauxite.getItemsMass()/weightBauxite) - 0.5)/maxBauxite)*100))
local statusBauxite = oreStatus(percentBauxite)
    
-- Coal Variables
local coalContainerSize = "M" --export: Size of the container (S, M, L)
local maxCoal = getContainerVolume(coalContainerSize)
local weightCoal = 1.35 --export:
if useL == 1 then
	massCoal = round(math.ceil(coal.getItemsMass()/weightCoal),1)
elseif useL == 0 then
   	massCoal = round(math.ceil(coal.getItemsMass()),1)
end
local percentCoal = math.ceil(((math.ceil((coal.getItemsMass()/weightCoal) - 0.5)/maxCoal)*100))
local statusCoal = oreStatus(percentCoal)

-- Hematite Variables
local hematiteContainerSize = "M" --export: Size of the container (S, M, L)
local maxHematite = getContainerVolume(hematiteContainerSize)
local weightHematite = 5.04 --export:
if useL == 1 then
    massHematite = round(math.ceil(hematite.getItemsMass()/weightHematite),1)
elseif useL == 0 then
    massHematite = round(math.ceil(hematite.getItemsMass()),1)
end
local percentHematite = math.ceil(((math.ceil((hematite.getItemsMass()/weightHematite) - 0.5)/maxHematite)*100))
local statusHematite = oreStatus(percentHematite)

-- Quartz Variables
local quartzContainerSize = "M" --export: Size of the container (S, M, L)
local maxQuartz = getContainerVolume(quartzContainerSize)
local weightQuartz = 2.65 --export:
if useL == 1 then
    massQuartz = round(math.ceil(quartz.getItemsMass()/weightQuartz),1)
elseif useL == 0 then
    massQuartz = round(math.ceil(quartz.getItemsMass()),1)
end

local percentQuartz = math.ceil(((math.ceil((quartz.getItemsMass()/weightQuartz) - 0.5)/maxQuartz)*100))
local statusQuartz = oreStatus(percentQuartz)


html = [[
<div class="bootstrap">
<h1 style="
	font-size: 8em;
">T1 Ore Status</h1>
<table 
style="
	margin-top: 10px;
	margin-left: auto;
	margin-right: auto;
	width: 80%;
	font-size: 4em;
">
	</br>
	<tr style="
		width: 100%;
		margin-bottom: 30px;
		background-color: blue;
		color: white;
	">
		<th>Ore</th>
		<th>Qty</th>
		<th>Levels</th>
		<th>Status</th>
	<tr>
		<th>Bauxite</th>
		<th>]]..massBauxite..unitMeasure..[[</th>
		<th>]]..percentBauxite..[[%</th>
		]]..statusBauxite..[[
	</tr>
	<tr>
		<th>Coal</th>
		<th>]]..massCoal..unitMeasure..[[</th>
		<th>]]..percentCoal..[[%</th>
		]]..statusCoal..[[
	</tr>
	<tr>
		<th>Hematite</th>
		<th>]]..massHematite..unitMeasure..[[</th>
		<th>]]..percentHematite..[[%</th>
		]]..statusHematite..[[
	</tr>
	<tr>
		<th>Quartz</th>
		<th>]]..massQuartz..unitMeasure..[[</th>
		<th>]]..percentQuartz..[[%</th>
		]]..statusQuartz..[[
	</tr>

</table>
</div>
]]

screen.setHTML(html)
